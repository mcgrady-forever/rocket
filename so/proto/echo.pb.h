// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: echo.proto

#ifndef PROTOBUF_echo_2eproto__INCLUDED
#define PROTOBUF_echo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace rocket {
namespace test {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_echo_2eproto();
void protobuf_AssignDesc_echo_2eproto();
void protobuf_ShutdownFile_echo_2eproto();

class EchoReq;
class EchoRsp;

// ===================================================================

class EchoReq : public ::google::protobuf::Message {
 public:
  EchoReq();
  virtual ~EchoReq();

  EchoReq(const EchoReq& from);

  inline EchoReq& operator=(const EchoReq& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoReq& default_instance();

  void Swap(EchoReq* other);

  // implements Message ----------------------------------------------

  EchoReq* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EchoReq& from);
  void MergeFrom(const EchoReq& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string echo = 1;
  inline bool has_echo() const;
  inline void clear_echo();
  static const int kEchoFieldNumber = 1;
  inline const ::std::string& echo() const;
  inline void set_echo(const ::std::string& value);
  inline void set_echo(const char* value);
  inline void set_echo(const char* value, size_t size);
  inline ::std::string* mutable_echo();
  inline ::std::string* release_echo();
  inline void set_allocated_echo(::std::string* echo);

  // @@protoc_insertion_point(class_scope:rocket.test.EchoReq)
 private:
  inline void set_has_echo();
  inline void clear_has_echo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* echo_;
  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();

  void InitAsDefaultInstance();
  static EchoReq* default_instance_;
};
// -------------------------------------------------------------------

class EchoRsp : public ::google::protobuf::Message {
 public:
  EchoRsp();
  virtual ~EchoRsp();

  EchoRsp(const EchoRsp& from);

  inline EchoRsp& operator=(const EchoRsp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EchoRsp& default_instance();

  void Swap(EchoRsp* other);

  // implements Message ----------------------------------------------

  EchoRsp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EchoRsp& from);
  void MergeFrom(const EchoRsp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string echo = 1;
  inline bool has_echo() const;
  inline void clear_echo();
  static const int kEchoFieldNumber = 1;
  inline const ::std::string& echo() const;
  inline void set_echo(const ::std::string& value);
  inline void set_echo(const char* value);
  inline void set_echo(const char* value, size_t size);
  inline ::std::string* mutable_echo();
  inline ::std::string* release_echo();
  inline void set_allocated_echo(::std::string* echo);

  // @@protoc_insertion_point(class_scope:rocket.test.EchoRsp)
 private:
  inline void set_has_echo();
  inline void clear_has_echo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* echo_;
  friend void  protobuf_AddDesc_echo_2eproto();
  friend void protobuf_AssignDesc_echo_2eproto();
  friend void protobuf_ShutdownFile_echo_2eproto();

  void InitAsDefaultInstance();
  static EchoRsp* default_instance_;
};
// ===================================================================


// ===================================================================

// EchoReq

// optional string echo = 1;
inline bool EchoReq::has_echo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EchoReq::set_has_echo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EchoReq::clear_has_echo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EchoReq::clear_echo() {
  if (echo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    echo_->clear();
  }
  clear_has_echo();
}
inline const ::std::string& EchoReq::echo() const {
  // @@protoc_insertion_point(field_get:rocket.test.EchoReq.echo)
  return *echo_;
}
inline void EchoReq::set_echo(const ::std::string& value) {
  set_has_echo();
  if (echo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    echo_ = new ::std::string;
  }
  echo_->assign(value);
  // @@protoc_insertion_point(field_set:rocket.test.EchoReq.echo)
}
inline void EchoReq::set_echo(const char* value) {
  set_has_echo();
  if (echo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    echo_ = new ::std::string;
  }
  echo_->assign(value);
  // @@protoc_insertion_point(field_set_char:rocket.test.EchoReq.echo)
}
inline void EchoReq::set_echo(const char* value, size_t size) {
  set_has_echo();
  if (echo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    echo_ = new ::std::string;
  }
  echo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rocket.test.EchoReq.echo)
}
inline ::std::string* EchoReq::mutable_echo() {
  set_has_echo();
  if (echo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    echo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rocket.test.EchoReq.echo)
  return echo_;
}
inline ::std::string* EchoReq::release_echo() {
  clear_has_echo();
  if (echo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = echo_;
    echo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EchoReq::set_allocated_echo(::std::string* echo) {
  if (echo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete echo_;
  }
  if (echo) {
    set_has_echo();
    echo_ = echo;
  } else {
    clear_has_echo();
    echo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rocket.test.EchoReq.echo)
}

// -------------------------------------------------------------------

// EchoRsp

// optional string echo = 1;
inline bool EchoRsp::has_echo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void EchoRsp::set_has_echo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void EchoRsp::clear_has_echo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void EchoRsp::clear_echo() {
  if (echo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    echo_->clear();
  }
  clear_has_echo();
}
inline const ::std::string& EchoRsp::echo() const {
  // @@protoc_insertion_point(field_get:rocket.test.EchoRsp.echo)
  return *echo_;
}
inline void EchoRsp::set_echo(const ::std::string& value) {
  set_has_echo();
  if (echo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    echo_ = new ::std::string;
  }
  echo_->assign(value);
  // @@protoc_insertion_point(field_set:rocket.test.EchoRsp.echo)
}
inline void EchoRsp::set_echo(const char* value) {
  set_has_echo();
  if (echo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    echo_ = new ::std::string;
  }
  echo_->assign(value);
  // @@protoc_insertion_point(field_set_char:rocket.test.EchoRsp.echo)
}
inline void EchoRsp::set_echo(const char* value, size_t size) {
  set_has_echo();
  if (echo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    echo_ = new ::std::string;
  }
  echo_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:rocket.test.EchoRsp.echo)
}
inline ::std::string* EchoRsp::mutable_echo() {
  set_has_echo();
  if (echo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    echo_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:rocket.test.EchoRsp.echo)
  return echo_;
}
inline ::std::string* EchoRsp::release_echo() {
  clear_has_echo();
  if (echo_ == &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = echo_;
    echo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void EchoRsp::set_allocated_echo(::std::string* echo) {
  if (echo_ != &::google::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete echo_;
  }
  if (echo) {
    set_has_echo();
    echo_ = echo;
  } else {
    clear_has_echo();
    echo_ = const_cast< ::std::string*>(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:rocket.test.EchoRsp.echo)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace test
}  // namespace rocket

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_echo_2eproto__INCLUDED
